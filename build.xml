<?xml version="1.0"?> 
<project name="owlapibundle" default="install" basedir=".">
   <!-- To run this build file set the environment variable
        PROTEGE_HOME to point to a protege distribution and type ant
        install or jar.
     -->

   <property environment="env"/>
   <property name = "protege.home"      location="${env.PROTEGE_HOME}"/>
   <property file = "${protege.home}/build.properties"/>

   <property file="local.properties"/>
   <property name="build"               location="./build"/>
   <property name="bundle.dir"          location="${build}"/>
   <property name="classes"             location="${build}/classes"/>
   <property name="plugin"              value="org.semanticweb.owl.owlapi"/>
   <property name="owlapi.jar"          location="${build}/${plugin}.jar"/>
   <property name = "protege.plugins"   location="${protege.home}/plugins"/>
   <property name = "manifest"          location = "${build}/manifest.mf"/>
   <property name = "extension.lib"     value="protege-owlapi-extensions.jar"/>
   <property name = "jar.staging"       location="${build}/jar.contents"/>
    
   <property name="major.version" value="3"/>
   <property name="minor.version" value="0"/>
   <property name="micro.version" value="0"/>
   <property name="svn.version"   value="1469_patched"/>


   <target name = "init">
     <tstamp>
       <format property="build.time" pattern="yyyy_MM_dd_hhmm"/>
     </tstamp>
     <mkdir dir="${classes}"/>
     <property name="bundle.version"
               value="${major.version}.${minor.version}.${micro.version}.Svn_${svn.version}_${build.time}"/>
   </target>

   <target name="copy.resources" depends="init">
       <copy file="./lib/owlapi-bin.jar"
             tofile="${owlapi.jar}"/>
   </target>


  <!-- ===================================================================================== -->
  <!-- BUNDLE - create the distribution JAR file that goes in the OSGi "plugins" directory -->
  <!-- ===================================================================================== -->

  <target name="add.source"/>

  <target name="compile" depends="init, copy.resources">
  	<javac srcdir="./src"
  		   destdir="${classes}"
  		   classpath="${owlapi.jar}"
  	       debug="true">
        <classpath>
            <pathelement location="${owlapi.jar}"/>
            <pathelement location="./lib/log4j.jar"/>
        </classpath>
    </javac>
  </target>

  <target name="protege.extension" depends="compile">
      <jar basedir="${classes}"
  	       destfile="${build}/${extension.lib}"/>
  </target>

  <target name="build.manifest" depends="init">
     <copy tofile="${manifest}" 
           file="META-INF/MANIFEST.MF" overwrite="true"/>
     <manifest file="${manifest}" 
               mode = "update">
        <attribute name="Built-By" value = "${user.name}"/>
        <attribute name="Bundle-Version" value="${bundle.version}"/>
     </manifest>
  </target>

   <target name = "create.update.properties">
       <property name="update.properties.file"
                 location="${build}/owlapi-update.properties"/>
       <echo file="${update.properties.file}" append="false">
id=${plugin}
version=${bundle.version}
download=http://smi-protege.stanford.edu/protege4/plugins/4.1/${plugin}.jar
name=OWL API Library Plugin
readme=http://smi-protege.stanford.edu/protege4/plugins/4.1/owlapi-readme.html
license=http://www.gnu.org/licenses/lgpl.html
author=Matthew Horridge for the CO-ODE project
       </echo>
   </target>

  <target name="jar"
	      depends="build.manifest, protege.extension">
  	<mkdir dir="${jar.staging}/lib"/>
  	<copy file="${build}/${extension.lib}" todir="${jar.staging}/lib"/>
    <jar basedir="${jar.staging}"
  	     destfile="${owlapi.jar}"
         manifest="${manifest}"
         update="true"/>
  </target>

  <target name="install" 
          depends="jar,create.update.properties">
      <copy file="${owlapi.jar}" todir="${protege.plugins}"/>
  </target> 

  <target name = "junit" depends="init"/>
  
  <!-- this target is to be used in the case where this is 
       not part of a bigger build                          -->
  <target name="clean">
      <delete dir="${build}"/>
  </target>


</project>
