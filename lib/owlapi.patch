Index: impl/src/main/java/uk/ac/manchester/cs/owl/owlapi/OWLLiteralImpl.java
===================================================================
--- impl/src/main/java/uk/ac/manchester/cs/owl/owlapi/OWLLiteralImpl.java	(revision 1925)
+++ impl/src/main/java/uk/ac/manchester/cs/owl/owlapi/OWLLiteralImpl.java	(working copy)
@@ -38,17 +38,10 @@
  */
 package uk.ac.manchester.cs.owl.owlapi;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.Reader;
-import java.io.Serializable;
-import java.io.Writer;
+import java.io.UnsupportedEncodingException;
 import java.util.Arrays;
-import java.util.zip.GZIPInputStream;
-import java.util.zip.GZIPOutputStream;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import org.semanticweb.owlapi.model.OWLAnnotationValueVisitor;
 import org.semanticweb.owlapi.model.OWLAnnotationValueVisitorEx;
@@ -70,83 +63,80 @@
  * <br>
  */
 public class OWLLiteralImpl extends OWLObjectImpl implements OWLLiteral {
+	private static Logger logger = Logger.getLogger(OWLLiteralImpl.class.getName());
+    private static boolean DO_COMPRESSION = true;
+    private static final int LOG_COUNTER_SIZE = 100;
+    
+    private static int uncompressedSize = 0;
+    private static int compressedSize = 0;
+    private static int logCounter;
+    
+	private final LiteralWrapper literal;
+	private final OWLDatatype datatype;
+	private final String lang;
+	private final int hashcode;
 	/**
 	 *
 	 */
 	private static final long serialVersionUID = 5569750232151559959L;
 
-	private static final class LiteralWrapper implements Serializable {
-		/**
-		 *
-		 */
-		private static final long serialVersionUID = -1658780658825282402L;
-		String l;
-		byte[] bytes;
+	private static final class LiteralWrapper {
+		private static final String ENCODING = "UTF-8";
 
-		LiteralWrapper(String s) {
-			if (s.length() > 160) {
-				try {
-					bytes = compress(s);
+		private String l;
+		private byte[] bytes;
+
+		public LiteralWrapper(String s) {
+			try {
+				if (DO_COMPRESSION) {
 					l = null;
-				} catch (IOException e) {
-					// some problem happened - defaulting to no compression
-					System.out.println("OWLLiteralImpl.LiteralWrapper.LiteralWrapper() "
-							+ e.getMessage());
+					bytes = s.getBytes(ENCODING);
+					monitorCompressionEffectiveness(s, bytes);
+				}
+				else {
 					l = s;
-					bytes = null;
+					bytes = null;					
 				}
-			} else {
-				bytes = null;
+			}
+			catch (UnsupportedEncodingException e) {
 				l = s;
+				bytes = null;
 			}
 		}
 
-		String get() {
-			if (l != null) {
+		public String get() {
+			if (l == null) {
+				try {
+					return new String(bytes, ENCODING);
+				}
+				catch (UnsupportedEncodingException e) {
+					throw new OWLRuntimeException(e);
+				}
+			}
+			else {
 				return l;
 			}
-			try {
-				return decompress(bytes);
-			} catch (IOException e) {
-				// some problem has happened - cannot recover from this
-				e.printStackTrace();
-				return null;
-			}
 		}
+	}
+		
 
-		byte[] compress(String s) throws IOException {
-			ByteArrayOutputStream out = new ByteArrayOutputStream();
-			GZIPOutputStream zipout;
-			zipout = new GZIPOutputStream(out);
-			Writer writer = new OutputStreamWriter(zipout, COMPRESSED_ENCODING);
-			writer.write(s);
-			writer.flush();
-			zipout.finish();
-			zipout.flush();
-			return out.toByteArray();
-		}
+    private static void monitorCompressionEffectiveness(String s, byte[] bytes) {
+        uncompressedSize += 2 * s.length();
+        compressedSize   += bytes.length;
+        if (logger.isLoggable(Level.FINE) && logCounter++ >= LOG_COUNTER_SIZE) {
+            logCounter = 0;
+            logger.fine(uncompressedSize + " bytes compressed down to " + compressedSize);
+            if (uncompressedSize != 0) {
+                logger.fine("Ratio of compressed to uncompressed = " + (float) (100.0 * ((float) compressedSize) / ((float) uncompressedSize)) + "%.");
+            }
+        }
+    }
 
-		String decompress(byte[] result) throws IOException {
-			ByteArrayInputStream in = new ByteArrayInputStream(result);
-			GZIPInputStream zipin = new GZIPInputStream(in);
-			Reader reader = new InputStreamReader(zipin, COMPRESSED_ENCODING);
-			StringBuilder b = new StringBuilder();
-			int c = reader.read();
-			while (c > -1) {
-				b.append((char) c);
-				c = reader.read();
-			}
-			return b.toString();
-		}
+    public static void setCompressionEnabled(boolean doCompression) {
+    	DO_COMPRESSION = doCompression;
+    }
 
-		private static final String COMPRESSED_ENCODING = "UTF-16";
-	}
 
-	private final LiteralWrapper literal;
-	private final OWLDatatype datatype;
-	private final String lang;
-	private final int hashcode;
-
 	/**
 	 *
 	 * @param dataFactory the datafactory
Index: rdfxml/src/main/java/org/coode/owlapi/rdf/model/AbstractTranslator.java
===================================================================
--- rdfxml/src/main/java/org/coode/owlapi/rdf/model/AbstractTranslator.java	(revision 1925)
+++ rdfxml/src/main/java/org/coode/owlapi/rdf/model/AbstractTranslator.java	(working copy)
@@ -944,7 +944,7 @@
         RESOURCE main = getResourceNode(RDF_NIL.getIRI());
         int listSize = list.size() - 1;
         for (int i = listSize; i >= 0; i--) {
-            RESOURCE anonNode = getAnonymousNode(list.subList(i, listSize));
+            RESOURCE anonNode = getAnonymousNode(list.subList(i, listSize + 1));
             addTriple(anonNode, getPredicateNode(RDF_TYPE.getIRI()), getResourceNode(listType));
             addTriple(anonNode, getPredicateNode(RDF_FIRST.getIRI()), getNode(list.get(i)));
             addTriple(anonNode, getPredicateNode(RDF_REST.getIRI()), main);
