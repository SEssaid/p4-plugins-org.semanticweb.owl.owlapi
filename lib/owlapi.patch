Index: turtleparser/src/main/java/uk/ac/manchester/cs/owl/owlapi/turtle/parser/TurtleOntologyParser.java
===================================================================
--- turtleparser/src/main/java/uk/ac/manchester/cs/owl/owlapi/turtle/parser/TurtleOntologyParser.java	(revision 1642)
+++ turtleparser/src/main/java/uk/ac/manchester/cs/owl/owlapi/turtle/parser/TurtleOntologyParser.java	(working copy)
@@ -2,6 +2,8 @@
 
 import java.io.BufferedInputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
 
 import org.coode.owlapi.turtle.TurtleOntologyFormat;
 import org.semanticweb.owlapi.io.AbstractOWLParser;
@@ -20,17 +22,22 @@
  */
 public class TurtleOntologyParser extends AbstractOWLParser {
 
-    public OWLOntologyFormat parse(OWLOntologyDocumentSource documentSource, OWLOntology ontology) throws OWLParserException {
+    public OWLOntologyFormat parse(OWLOntologyDocumentSource documentSource, OWLOntology ontology) throws OWLParserException, IOException {
+        Reader reader = null;
+        InputStream is = null;
         try {
             TurtleParser parser;
             if(documentSource.isReaderAvailable()) {
-                parser = new TurtleParser(documentSource.getReader(), new ConsoleTripleHandler(), documentSource.getDocumentIRI().toString());
+                reader = documentSource.getReader();
+                parser = new TurtleParser(reader, new ConsoleTripleHandler(), documentSource.getDocumentIRI().toString());
             }
             else if(documentSource.isInputStreamAvailable()) {
-                parser = new TurtleParser(documentSource.getInputStream(), new ConsoleTripleHandler(), documentSource.getDocumentIRI().toString());
+                is = documentSource.getInputStream();
+                parser = new TurtleParser(is, new ConsoleTripleHandler(), documentSource.getDocumentIRI().toString());
             }
             else {
-                parser = new TurtleParser(new BufferedInputStream(documentSource.getDocumentIRI().toURI().toURL().openStream()), new ConsoleTripleHandler(), documentSource.getDocumentIRI().toString());
+                is = new BufferedInputStream(documentSource.getDocumentIRI().toURI().toURL().openStream());
+                parser = new TurtleParser(is, new ConsoleTripleHandler(), documentSource.getDocumentIRI().toString());
             }
 
             OWLRDFConsumerAdapter consumer = new OWLRDFConsumerAdapter(getOWLOntologyManager(), ontology, parser);
@@ -45,5 +52,13 @@
         catch (IOException e) {
             throw new OWLParserIOException(e);
         }
+        finally {
+            if (is != null) {
+                is.close();
+            }
+            if (reader != null) {
+                reader.close();
+            }
+        }
     }
 }
Index: owlxmlparser/src/main/java/org/coode/owlapi/owlxmlparser/OWLXMLParser.java
===================================================================
--- owlxmlparser/src/main/java/org/coode/owlapi/owlxmlparser/OWLXMLParser.java	(revision 1642)
+++ owlxmlparser/src/main/java/org/coode/owlapi/owlxmlparser/OWLXMLParser.java	(working copy)
@@ -2,6 +2,9 @@
 
 import java.io.IOException;
 import java.util.Map;
+import java.io.InputStream;
+import java.io.Reader;
+import java.io.InputStream;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
@@ -30,13 +33,14 @@
 
 
     public OWLOntologyFormat parse(OWLOntologyDocumentSource documentSource, OWLOntology ontology) throws OWLParserException, IOException, UnloadableImportException {
+        InputSource isrc = null;
         try {
             System.setProperty("entityExpansionLimit", "100000000");
             OWLXMLOntologyFormat format = new OWLXMLOntologyFormat();
             SAXParserFactory factory = SAXParserFactory.newInstance();
             factory.setNamespaceAware(true);
             SAXParser parser = factory.newSAXParser();
-            InputSource isrc = getInputSource(documentSource);
+            isrc = getInputSource(documentSource);
             OWLXMLParserHandler handler = new OWLXMLParserHandler(getOWLOntologyManager(), ontology);
             parser.parse(isrc, handler);
             Map<String, String> prefix2NamespaceMap = handler.getPrefixName2PrefixMap();
@@ -59,5 +63,13 @@
             // General exception
             throw new OWLParserSAXException(e);
         }
+        finally {
+        	if (isrc != null && isrc.getByteStream() != null) {
+        		isrc.getByteStream().close();
+        	}
+        	else if (isrc != null && isrc.getCharacterStream() != null) {
+        		isrc.getCharacterStream().close();
+        	}
+        }
     }
 }
Index: impl/src/main/java/uk/ac/manchester/cs/owl/owlapi/InitVisitorFactory.java
===================================================================
--- impl/src/main/java/uk/ac/manchester/cs/owl/owlapi/InitVisitorFactory.java	(revision 1642)
+++ impl/src/main/java/uk/ac/manchester/cs/owl/owlapi/InitVisitorFactory.java	(working copy)
@@ -253,10 +253,8 @@
 
         @Override
         public Collection<K> visit(OWLDisjointUnionAxiom axiom) {
-            List<OWLClassExpression> list = new ArrayList<OWLClassExpression>(axiom.getClassExpressions());
-            if (named) {
-                deleteAnonymousClasses(list);
-            }
+            List<OWLClassExpression> list = new ArrayList<OWLClassExpression>();
+            list.add(axiom.getOWLClass());
             return (Collection<K>) list;
         }
 
Index: rdfxmlparser/src/main/java/org/coode/owlapi/rdfxml/parser/RDFXMLParser.java
===================================================================
--- rdfxmlparser/src/main/java/org/coode/owlapi/rdfxml/parser/RDFXMLParser.java	(revision 1642)
+++ rdfxmlparser/src/main/java/org/coode/owlapi/rdfxml/parser/RDFXMLParser.java	(working copy)
@@ -32,6 +32,7 @@
 
 
     public OWLOntologyFormat parse(OWLOntologyDocumentSource documentSource, OWLOntology ontology) throws OWLParserException, IOException, UnloadableImportException {
+        InputSource is = null;
         try {
             final RDFXMLOntologyFormat format = new RDFXMLOntologyFormat();
             if (owlOntologyManager == null) {
@@ -74,7 +75,7 @@
             });
             consumer.setIRIProvider(prov);
             consumer.setOntologyFormat(format);
-            InputSource is = getInputSource(documentSource);
+            is = getInputSource(documentSource);
             parser.parse(is, consumer);
             return format;
         }
@@ -87,6 +88,14 @@
         catch (SAXException e) {
             throw new OWLRDFXMLParserSAXException(e);
         }
+        finally {
+        	if (is != null && is.getByteStream() != null) {
+        		is.getByteStream().close();
+        	}
+        	else if (is != null && is.getCharacterStream() != null) {
+        		is.getCharacterStream().close();
+        	}
+        }
     }
 
 
Index: functionalparser/src/main/java/org/coode/owlapi/functionalparser/OWLFunctionalSyntaxOWLParser.java
===================================================================
--- functionalparser/src/main/java/org/coode/owlapi/functionalparser/OWLFunctionalSyntaxOWLParser.java	(revision 1642)
+++ functionalparser/src/main/java/org/coode/owlapi/functionalparser/OWLFunctionalSyntaxOWLParser.java	(working copy)
@@ -1,6 +1,8 @@
 package org.coode.owlapi.functionalparser;
 
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
 
 import org.semanticweb.owlapi.io.AbstractOWLParser;
 import org.semanticweb.owlapi.io.OWLOntologyDocumentSource;
@@ -19,16 +21,21 @@
 public class OWLFunctionalSyntaxOWLParser extends AbstractOWLParser {
 
     public OWLOntologyFormat parse(OWLOntologyDocumentSource documentSource, OWLOntology ontology) throws OWLParserException, IOException, UnloadableImportException {
+        InputStream is = null;
+        Reader reader = null;
         try {
             OWLFunctionalSyntaxParser parser;
             if(documentSource.isReaderAvailable()) {
-                parser = new OWLFunctionalSyntaxParser(documentSource.getReader());
+                reader = documentSource.getReader();
+                parser = new OWLFunctionalSyntaxParser(reader);
             }
             else if(documentSource.isInputStreamAvailable()) {
-                parser = new OWLFunctionalSyntaxParser(documentSource.getInputStream());
+                is = documentSource.getInputStream();
+                parser = new OWLFunctionalSyntaxParser(is);
             }
             else {
-                parser = new OWLFunctionalSyntaxParser(getInputStream(documentSource.getDocumentIRI()));
+                is = getInputStream(documentSource.getDocumentIRI());
+                parser = new OWLFunctionalSyntaxParser(is);
             }
             parser.setUp(getOWLOntologyManager(), ontology);
             return parser.parse();
@@ -36,5 +43,13 @@
         catch (ParseException e) {
             throw new OWLParserException(e.getMessage(), e.currentToken.beginLine, e.currentToken.beginColumn);
         }
+        finally {
+            if (is != null) {
+                is.close();
+            }
+            if (reader != null) {
+                reader.close();
+            }
+        }
     }
 }
Index: oboparser/src/main/java/org/coode/owlapi/obo/parser/OWLOBOParser.java
===================================================================
--- oboparser/src/main/java/org/coode/owlapi/obo/parser/OWLOBOParser.java	(revision 1642)
+++ oboparser/src/main/java/org/coode/owlapi/obo/parser/OWLOBOParser.java	(working copy)
@@ -1,6 +1,8 @@
 package org.coode.owlapi.obo.parser;
 
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
 
 import org.semanticweb.owlapi.io.AbstractOWLParser;
 import org.semanticweb.owlapi.io.OWLOntologyDocumentSource;
@@ -19,14 +21,19 @@
 
     public OWLOntologyFormat parse(OWLOntologyDocumentSource documentSource, OWLOntology ontology) throws OWLParserException, IOException {
         OBOParser parser;
+        Reader reader = null;
+        InputStream is = null;
         if (documentSource.isReaderAvailable()) {
-            parser = new OBOParser(documentSource.getReader());
+            reader = documentSource.getReader();
+            parser = new OBOParser(reader);
         }
         else if (documentSource.isInputStreamAvailable()) {
-            parser = new OBOParser(documentSource.getInputStream());
+            is = documentSource.getInputStream();
+            parser = new OBOParser(is);
         }
         else {
-            parser = new OBOParser(getInputStream(documentSource.getDocumentIRI()));
+            is = getInputStream(documentSource.getDocumentIRI());
+            parser = new OBOParser(is);
         }
         parser.setHandler(new OBOConsumer(getOWLOntologyManager(), ontology));
         try {
@@ -38,6 +45,14 @@
         catch(TokenMgrError e) {
             throw new OWLParserException(e);
         }
+        finally {
+            if (is != null) {
+                is.close();
+            }
+            if (reader != null) {
+                reader.close();
+            }
+        }
         return new OBOOntologyFormat();
     }
 }
Index: krssparser/src/main/java/de/uulm/ecs/ai/owlapi/krssparser/KRSS2OWLParser.java
===================================================================
--- krssparser/src/main/java/de/uulm/ecs/ai/owlapi/krssparser/KRSS2OWLParser.java	(revision 1642)
+++ krssparser/src/main/java/de/uulm/ecs/ai/owlapi/krssparser/KRSS2OWLParser.java	(working copy)
@@ -1,6 +1,8 @@
 package de.uulm.ecs.ai.owlapi.krssparser;
 
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
 
 import org.semanticweb.owlapi.io.AbstractOWLParser;
 import org.semanticweb.owlapi.io.OWLOntologyDocumentSource;
@@ -274,15 +276,20 @@
 
 
     public OWLOntologyFormat parse(OWLOntologyDocumentSource documentSource, OWLOntology ontology) throws OWLParserException, IOException {
+        InputStream is = null;
+        Reader reader = null;
         try {
             KRSS2OntologyFormat format = new KRSS2OntologyFormat();
             KRSS2Parser parser;
             if (documentSource.isReaderAvailable()) {
-                parser = new KRSS2Parser(documentSource.getReader());
+                reader = documentSource.getReader();
+                parser = new KRSS2Parser(reader);
             } else if (documentSource.isInputStreamAvailable()) {
-                parser = new KRSS2Parser(documentSource.getInputStream());
+                is = documentSource.getInputStream();
+                parser = new KRSS2Parser(is);
             } else {
-                parser = new KRSS2Parser(getInputStream(documentSource.getDocumentIRI()));
+                is = getInputStream(documentSource.getDocumentIRI());
+                parser = new KRSS2Parser(is);
             }
             parser.setOntology(ontology, getOWLOntologyManager().getOWLDataFactory());
             parser.parse();
@@ -291,5 +298,13 @@
         catch (ParseException e) {
             throw new KRSS2OWLParserException(e);
         }
+        finally {
+            if (is != null) {
+                is.close();
+            }
+            if (reader != null) {
+                reader.close();
+            }
+        }
     }
 }
