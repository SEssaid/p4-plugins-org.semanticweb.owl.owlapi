Index: impl/src/main/java/uk/ac/manchester/cs/owl/owlapi/OWLLiteralImpl.java
===================================================================
--- impl/src/main/java/uk/ac/manchester/cs/owl/owlapi/OWLLiteralImpl.java	(revision 1909)
+++ impl/src/main/java/uk/ac/manchester/cs/owl/owlapi/OWLLiteralImpl.java	(working copy)
@@ -36,6 +36,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package uk.ac.manchester.cs.owl.owlapi;
 
 import java.io.ByteArrayInputStream;
@@ -44,8 +45,11 @@
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
 import java.io.Reader;
+import java.io.UnsupportedEncodingException;
 import java.io.Writer;
 import java.util.Arrays;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
 
@@ -59,6 +63,7 @@
 import org.semanticweb.owlapi.model.OWLObject;
 import org.semanticweb.owlapi.model.OWLObjectVisitor;
 import org.semanticweb.owlapi.model.OWLObjectVisitorEx;
+import org.semanticweb.owlapi.model.OWLRuntimeException;
 
 /**
  * Author: Matthew Horridge<br>
@@ -68,117 +73,151 @@
  * <br>
  */
 public class OWLLiteralImpl extends OWLObjectImpl implements OWLLiteral {
-	//	private static int compress = 0;
-	//	private static int nocompress = 0;
-	private static final class LiteralWrapper {
-		String l;
-		byte[] bytes;
+	private static Logger logger = Logger.getLogger(OWLLiteralImpl.class.getName());
+	private static boolean DO_COMPRESSION = true;
+	private static final int LOG_COUNTER_SIZE = 100;
+	
+	private static int uncompressedSize = 0;
+	private static int compressedSize = 0;
+	private static int logCounter;
+	
+	private final UTF8LiteralWrapper literal;
+	private final OWLDatatype datatype;
+	private final String lang;
+	private final int hashcode;
+	
+	private static final class UTF8LiteralWrapper {
+		private static final String ENCODING = "UTF-8";
 
-		LiteralWrapper(String s) {
-			if (s.length() > 160) {
+		private String l;
+		private byte[] bytes;
+		
+		public UTF8LiteralWrapper(String s) {
+			try {
+				if (DO_COMPRESSION) {
+					l = null;
+					bytes = s.getBytes(ENCODING);
+					monitorCompressionEffectiveness(s, bytes);
+				}
+				else {
+					l = s;
+					bytes = null;					
+				}
+			}
+			catch (UnsupportedEncodingException e) {
+				l = s;
+				bytes = null;
+			}
+		}
+		
+		public String get() {
+			if (l == null) {
 				try {
+					return new String(bytes, ENCODING);
+				}
+				catch (UnsupportedEncodingException e) {
+					throw new OWLRuntimeException(e);
+				}
+			}
+			else {
+				return l;
+			}
+		}
+	}
+
+	private static final class CompressingLiteralWrapper {
+		private static final String COMPRESSED_ENCODING = "UTF-16";
+		private static final int COMPRESSION_SIZE = 160;
+		
+		private String l;
+		private byte[] bytes;
+	
+		public CompressingLiteralWrapper(String s) {
+			if (DO_COMPRESSION && s.length() > COMPRESSION_SIZE) {
+				try {
+					l = null;
 					bytes = compress(s);
-					l = null;
+					monitorCompressionEffectiveness(s, bytes);
 				} catch (IOException e) {
-					// some problem happened - defaulting to no compression
 					System.out.println("OWLLiteralImpl.LiteralWrapper.LiteralWrapper() "
 							+ e.getMessage());
 					l = s;
 					bytes = null;
 				}
 			} else {
-				//	nocompress++;
+				l = s;
 				bytes = null;
-				l = s;
 			}
-			//			if((compress+nocompress)%1000==0) {
-			//				System.out.println("OWLLiteralImpl.LiteralWrapper.LiteralWrapper() compressed: "+compress+"\tnot compressed: "+nocompress);
-			//			}
+	
 		}
-
-		String get() {
+	
+		public String get() {
 			if (l != null) {
 				return l;
 			}
 			try {
 				return decompress(bytes);
 			} catch (IOException e) {
-				// some problem has happened - cannot recover from this
-				e.printStackTrace();
-				return null;
+				logger.log(Level.SEVERE, "Unrecoverable exception caught decompressing literal", e);
+				throw new OWLRuntimeException(e);
 			}
 		}
-
-//		byte[] compress(String s) throws IOException {
-//			ByteArrayOutputStream out = new ByteArrayOutputStream();
-//			GZIPOutputStream zipout;
-//			zipout = new GZIPOutputStream(out);
-//			zipout.write(s.getBytes("UTF-8"));
-//			zipout.finish();
-//			zipout.flush();
-//			//		compress++;
-//			return out.toByteArray();
-//		}
-//
-//		String decompress(byte[] result) throws IOException {
-//			ByteArrayInputStream in = new ByteArrayInputStream(result);
-//			GZIPInputStream zipin = new GZIPInputStream(in);
-//			StringBuilder b = new StringBuilder();
-//			int c = zipin.read();
-//			while (c > -1) {
-//				b.append((char) c);
-//				c = zipin.read();
-//			}
-//			return b.toString();
-//		}
 		
-		byte[] compress(String s) throws IOException {
+		private byte[] compress(String s) throws IOException {
 			ByteArrayOutputStream out = new ByteArrayOutputStream();
 			GZIPOutputStream zipout;
 			zipout = new GZIPOutputStream(out);
 			Writer writer = new OutputStreamWriter(zipout, COMPRESSED_ENCODING);
-
-			writer.write(s);
-			writer.flush();
-			zipout.finish();
-			zipout.flush();
-			// compress++;
-			return out.toByteArray();
+			
+			try {
+				writer.write(s);
+				writer.flush();
+				zipout.finish();
+				zipout.flush();
+				return out.toByteArray();
 			}
-
-			String decompress(byte[] result) throws IOException {
+			finally {
+				writer.close();
+			}
+		}
+	
+		private String decompress(byte[] result) throws IOException {
 			ByteArrayInputStream in = new ByteArrayInputStream(result);
 			GZIPInputStream zipin = new GZIPInputStream(in);
 			Reader reader = new InputStreamReader(zipin, COMPRESSED_ENCODING);
-			StringBuilder b = new StringBuilder();
-			int c = reader.read();
-			while (c > -1) {
-			b.append((char) c);
-			c = reader.read();
+	
+			try {
+				StringBuilder b = new StringBuilder();
+				int c = reader.read();
+				while (c > -1) {
+					b.append((char) c);
+					c = reader.read();
+				}
+				return b.toString();
 			}
-			return b.toString();
+			finally {
+				reader.close();
 			}
-
-
-
-			private static final String COMPRESSED_ENCODING = "UTF-16";
-
-		@Override
-		public boolean equals(Object arg0) {
-			// TODO Auto-generated method stub
-			return super.equals(arg0);
 		}
+	
 	}
+	
+	private static void monitorCompressionEffectiveness(String s, byte[] bytes) {
+		uncompressedSize += 2 * s.length();
+		compressedSize   += bytes.length;
+		if (logger.isLoggable(Level.FINE) && logCounter++ >= LOG_COUNTER_SIZE) {
+			logCounter = 0;
+			logger.fine(uncompressedSize + " bytes compressed down to " + compressedSize);
+			if (uncompressedSize != 0) {
+				logger.fine("Ratio of compressed to uncompressed = " + (float) (100.0 * ((float) compressedSize) / ((float) uncompressedSize)) + "%.");
+			}
+		}
+	}
 
-	private final LiteralWrapper literal;
-	private final OWLDatatype datatype;
-	private final String lang;
-	private final int hashcode;
-
 	@SuppressWarnings("javadoc")
 	public OWLLiteralImpl(OWLDataFactory dataFactory, String literal, OWLDatatype datatype) {
 		super(dataFactory);
-		this.literal = new LiteralWrapper(literal);
+		this.literal = new UTF8LiteralWrapper(literal);
 		this.datatype = datatype;
 		this.lang = "";
 		hashcode = getHashCode();
@@ -187,11 +226,15 @@
 	@SuppressWarnings("javadoc")
 	public OWLLiteralImpl(OWLDataFactory dataFactory, String literal, String lang) {
 		super(dataFactory);
-		this.literal = new LiteralWrapper(literal);
+		this.literal = new UTF8LiteralWrapper(literal);
 		this.lang = lang;
 		this.datatype = dataFactory.getRDFPlainLiteral();
 		hashcode = getHashCode();
 	}
+	
+	public static void setCompressionEnabled(boolean doCompression) {
+		DO_COMPRESSION = doCompression;
+	}
 
 	public String getLiteral() {
 		return literal.get();
Index: rdfxml/src/main/java/org/coode/owlapi/rdf/model/AbstractTranslator.java
===================================================================
--- rdfxml/src/main/java/org/coode/owlapi/rdf/model/AbstractTranslator.java	(revision 1909)
+++ rdfxml/src/main/java/org/coode/owlapi/rdf/model/AbstractTranslator.java	(working copy)
@@ -944,7 +944,7 @@
         RESOURCE main = getResourceNode(RDF_NIL.getIRI());
         int listSize = list.size() - 1;
         for (int i = listSize; i >= 0; i--) {
-            RESOURCE anonNode = getAnonymousNode(list.subList(i, listSize));
+            RESOURCE anonNode = getAnonymousNode(list.subList(i, listSize + 1));
             addTriple(anonNode, getPredicateNode(RDF_TYPE.getIRI()), getResourceNode(listType));
             addTriple(anonNode, getPredicateNode(RDF_FIRST.getIRI()), getNode(list.get(i)));
             addTriple(anonNode, getPredicateNode(RDF_REST.getIRI()), main);
